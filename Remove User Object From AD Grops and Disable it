#input: username/email
#remove from all groups
#change to disabled
#enter to group disabled_users


function GetGroupID {

    param ($Group)
    if($Group -ne $null) {
        return [int]$Group.sid.Value.Substring($Group.sid.Value.LastIndexOf("-")+1)
    }
    return 0;
}

function ViewUser {
    $user | Select-Object "Name", "Department",  @{Name="User Creation Time";Expression="whenCreated"} `
          | Format-List
          # @{Name="Last Log On";Expression="LastLogOn"},


    $userGroups | Select-Object @{Name="Group Name";Expression="name"}, "GroupScope", "GroupCategory", @{Name="Path";Expression="distinguishedName"} `
                | Format-Table
}

function GetUserGroups {

    param ($User)

    $searchExpression = Read-Host "Insert Group Search Expression [if needed]"
    if($searchExpression -ne "") {
        $searchExpression = "*" + $searchExpression + "*"
    }
    $searchExpression

    if($User -ne $null) {

        if($searchExpression -ne "") {
            return $user | Get-ADPrincipalGroupMembership | ? name -Like $searchExpression
        }
        else {
            return $user | Get-ADPrincipalGroupMembership
        }
    }
    return $null

}

function DisableUser {
 
    $success = $true
        
    # add user to disabled group
    try {
        Add-ADGroupMember -Identity $disabledUsersGroup -Members $user
        # set disabled group as user primary group
        Get-ADUser -Identity $user | Set-ADObject -Replace @{primaryGroupID="$disabledUsersGroupID"}
        $success += $true
    } catch {
        Write-Host "there was an error moving user to disabled group, try again later"
    }

    # remove user from groups
    $userGroups | % {
        try {
            if((GetGroupID -Group $_) -ne $disabledUsersGroupID) {
                Remove-ADGroupMember -Identity $_ -Members $user -Confirm:$false
            }
        $success += $true
        } catch {
            Write-Host "there was an error removing user from groups, try again later"
        }
    }

    # change user state to disabled
    try {
        Set-ADUser -Identity $user -Enabled $false
        $success += $true
    } catch {
        Write-Host "there was an error changing user state to disabled, try again later"
    }

    # move to Disabled_Users OU
    try {
        Move-ADObject -Identity $user -TargetPath $disabledUsersOUPath
        $success += $true
    } catch {
        Write-Host "there was an error changing user OU, try again later"
    }
    
    return $success
}


$userUPN = [string]::Empty
$user = $null
$disabledUsersGroup = Get-ADGroup -Filter {Name -eq "DisabledUsers"}
$disabledUsersGroupID = GetGroupID -Group $disabledUsersGroup 
$disabledUsersOUPath =  "OU=Disabled_Users,DC=ido,DC=tests"#"OU=Disabled_Users,OU=Disable,DC=MSE,DC=Corp"

# get user
do {

    $userUPN = Read-Host "Insert User UPN (Email Address)"
    # check expression
    if($userUPN -notmatch "[a-z0-9!#\$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#\$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?") {
        $userUPN = [string]::Empty
        Write-Host "not an email address, try again" -ForegroundColor White -BackgroundColor Red
        continue
    }
    $user = Get-ADUser -Filter {UserPrincipalName -eq $userUPN} -Properties *
    if ($user -eq $null) {
        Write-Host "User not found, try again" -ForegroundColor Yellow -BackgroundColor Black
        $userUPN = [string]::Empty
    }

} while ($userUPN -eq [string]::Empty)

# get all user groups
$userGroups = GetUserGroups -User $user


ViewUser

$ans = Read-Host "Remove From All Groups? [Y/N]"
if ($ans -eq "Y" -or $ans -eq "y") {
    $operationCompleted = DisableUser
    if($operationCompleted) { 
        Write-Host "Operation completed successfuly" -ForegroundColor White -BackgroundColor Green 
    } else { 
        Write-Host "There was a problem completing the operation, please try again"
    }
}
